{"version":3,"sources":["Ninjas.js","AddNinja.js","App.js","serviceWorker.js","index.js"],"names":["Ninjas","ninjas","deleteNinja","ninjasList","map","ninja","className","key","id","name","age","belt","onClick","AddNinja","state","handleChange","e","setState","target","value","onSubmit","preventDefault","props","addNinjas","this","htmlFor","type","onChange","Component","App","Math","random","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAsBeA,EApBA,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,YAEfC,EAAaF,EAAOG,KAAI,SAAAC,GAC1B,OACI,yBAAKC,UAAU,QAAQC,IAAKF,EAAMG,IAC9B,sCAAYH,EAAMI,MAClB,qCAAWJ,EAAMK,IAAjB,KACA,sCAAYL,EAAMM,MAClB,4BAAQC,QAAS,kBAAMV,EAAYG,EAAMG,MAAzC,oBAKZ,OACI,yBAAKF,UAAU,cACVH,I,OCmBEU,E,2MAjCXC,MAAQ,CACJL,KAAM,KACNC,IAAK,KACLC,KAAM,M,EAGVI,aAAe,SAACC,GACZ,EAAKC,SAAL,eACID,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAI/BC,SAAW,SAACJ,GACRA,EAAEK,iBACF,EAAKC,MAAMC,UAAU,EAAKT,Q,wEAG1B,OACI,yBAAKR,UAAU,YACX,0BAAMc,SAAUI,KAAKJ,UACjB,2BAAOK,QAAQ,QAAf,WACA,2BAAOC,KAAK,OAAOlB,GAAG,OAAOmB,SAAUH,KAAKT,eAC5C,2BAAOU,QAAQ,OAAf,UACA,2BAAOC,KAAK,OAAOlB,GAAG,MAAMmB,SAAUH,KAAKT,eAC3C,2BAAOU,QAAQ,QAAf,WACA,2BAAOC,KAAK,OAAOlB,GAAG,OAAOmB,SAAUH,KAAKT,eAC5C,gD,GA3BGa,aCuCRC,E,2MApCbf,MAAQ,CACNb,OAAQ,CACN,CAAEQ,KAAM,MAAOC,IAAK,GAAIC,KAAM,QAASH,GAAI,GAC3C,CAAEC,KAAM,QAASC,IAAK,GAAIC,KAAM,QAASH,GAAI,GAC7C,CAAEC,KAAM,uBAAwBC,IAAK,GAAIC,KAAM,YAAaH,GAAI,K,EAIpEe,UAAY,SAAClB,GACXA,EAAMG,GAAKsB,KAAKC,SAChB,IAAI9B,EAAM,sBAAO,EAAKa,MAAMb,QAAlB,CAA0BI,IACpC,EAAKY,SAAS,CACZhB,OAAQA,K,EAIZC,YAAc,SAACM,GACb,IAAIP,EAAS,EAAKa,MAAMb,OAAO+B,QAAO,SAAA3B,GACpC,OAAOA,EAAMG,KAAOA,KAGtB,EAAKS,SAAS,CACZhB,OAAQA,K,wEAIV,OACE,yBAAKK,UAAU,OACb,oDACA,kBAAC,EAAD,CAAQJ,YAAasB,KAAKtB,YAAaD,OAAQuB,KAAKV,MAAMb,SAC1D,kBAAC,EAAD,CAAUsB,UAAaC,KAAKD,iB,GA/BlBK,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8221307.chunk.js","sourcesContent":["import React from 'react';\n\nconst Ninjas = ({ninjas, deleteNinja}) => {\n\n    const ninjasList = ninjas.map(ninja => {\n        return (\n            <div className=\"ninja\" key={ninja.id}>\n                <div>Name: {ninja.name}</div>\n                <div>Age: {ninja.age} </div>\n                <div>Belt: {ninja.belt}</div>\n                <button onClick={() => deleteNinja(ninja.id)}>Delete Ninja</button>\n            </div>\n        )\n    })\n\n    return (\n        <div className=\"ninja-list\">\n            {ninjasList}\n        </div>\n    )\n}\n\nexport default Ninjas;","import React, {Component} from 'react'\n\nclass AddNinja extends Component {\n    state = {\n        name: null, \n        age: null, \n        belt: null\n    }\n\n    handleChange = (e) =>{\n        this.setState({\n           [e.target.id]: e.target.value\n        })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addNinjas(this.state);\n    }\n    render(){\n        return(\n            <div className=\"formName\">\n                <form onSubmit={this.onSubmit}>\n                    <label htmlFor=\"name\">Name : </label>\n                    <input type=\"text\" id=\"name\" onChange={this.handleChange}/>\n                    <label htmlFor=\"age\">Age : </label>\n                    <input type=\"text\" id=\"age\" onChange={this.handleChange}/>\n                    <label htmlFor=\"belt\">Belt : </label>\n                    <input type=\"text\" id=\"belt\" onChange={this.handleChange}/>\n                    <button>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddNinja;","import React, { Component } from 'react';\nimport Ninjas from './Ninjas';\nimport AddNinja from './AddNinja'\n\nclass App extends Component {\n  state = {\n    ninjas: [\n      { name: \"Ryu\", age: 30, belt: \"black\", id: 1 },\n      { name: \"Yoshi\", age: 20, belt: \"green\", id: 2 },\n      { name: \"Benedict Cumberbatch\", age: 43, belt: \"Old black\", id: 3 }\n    ]\n  }\n\n  addNinjas = (ninja) => {\n    ninja.id = Math.random();\n    let ninjas = [...this.state.ninjas, ninja];\n    this.setState({\n      ninjas: ninjas,\n    })\n  } \n\n  deleteNinja = (id) => {\n    let ninjas = this.state.ninjas.filter(ninja => {\n      return(ninja.id !== id)\n    })\n\n    this.setState({\n      ninjas: ninjas,\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Welcome to React app</h1>\n        <Ninjas deleteNinja={this.deleteNinja} ninjas={this.state.ninjas}/>\n        <AddNinja addNinjas = {this.addNinjas}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}